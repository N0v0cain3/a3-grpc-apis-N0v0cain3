syntax = "proto3";

package reddit;


service Reddit {
  rpc CreatePost(CreatePostRequest) returns (CreatePostResponse) {};
  rpc VotePost(VotePostRequest) returns (VotePostResponse) {};
  rpc GetPost(GetPostRequest) returns (GetPostResponse) {};
  rpc CreateComment(CreateCommentRequest) returns (CreateCommentResponse) {};
  rpc VoteComment(VoteCommentRequest) returns (VoteCommentResponse) {};
  rpc TopVotedComments(GetTopCommentsRequest) returns (GetTopCommentsResponse) {};
  rpc ExpandCommentBranch(ExpandCommentBranchRequest) returns (ExpandCommentBranchResponse) {};

  // EXTRA CREDIT monitor updates
  rpc MonitorUpdates(stream MonitorUpdatesRequest) returns (stream MonitorUpdatesResponse);

}


// EXTRA CREDIT: Monitor updates bi-directional streaming 
message MonitorUpdatesRequest {
  oneof request_type {
    int32 post_id = 1;      // Post ID for initial request
    int32 comment_id = 2;   // Comment IDs for subsequent requests
  }
}

message UpdateScore {
  oneof entity_id {
    int32 post_id = 1;      // Post ID
    int32 comment_id = 2;   // Comment ID
  }
  int32 new_score = 3;      // Updated score
}

message MonitorUpdatesResponse {
  repeated UpdateScore updates = 1; // Stream of score updates
}

// tree of depth 2
message ExpandCommentBranchRequest {
  int32 comment_id = 1;  // ID of the comment to expand
  int32 limit = 2;       // Number of top comments to retrieve for each level
}

message CommentBranch {
  Comment comment = 1;                   // The comment data
  repeated CommentWithReplies replies = 2; // Top replies to the comment
}

message ExpandCommentBranchResponse {
  CommentBranch comment_branch = 1;  // The expanded comment branch
} 

message CommentWithReplies {
  Comment comment = 1;          // The comment data
  repeated Temp replies = 2;         // Whether this comment has replies
}

message Temp{
  Comment comment = 1;
}

// Top N comments
message GetTopCommentsRequest {
  int32 post_id = 1;  // ID of the post
  int32 limit = 2;    // Number of top comments to retrieve
}

message CommentWithRepliesInfo {
  Comment comment = 1;          // The comment data
  bool has_replies = 2;         // Whether this comment has replies
}

message GetTopCommentsResponse {
  repeated CommentWithRepliesInfo top_comments = 1; // List of top comments with replies info
}

// upVoting or downvoting a comment

message VoteCommentRequest {
  int32 comment_id = 1;  // ID of the comment to vote
  bool upvote = 2;       // True for upvote, false for downvote
}

message VoteCommentResponse {
  int32 new_score = 1;   // Updated score of the comment after voting
}

// Creating comment request and response
message CreateCommentRequest{
  string author = 1;
  string text = 2;
  int32 post_id = 3;
  int32 reply_to = 4; // Optional: ID of the comment to which this is a reply

}

message CreateCommentResponse{
  Comment comment = 1;
 }

// Get post request
message GetPostRequest {
  int32 post_id = 1;
}

// The response message should contain the post data.
message GetPostResponse {
  Post post = 1;
}

// Vote on Post, request and response
message VotePostRequest {
  int32 post_id = 1;  // ID of the post to vote
  bool upvote = 2;     // True for upvote, false for downvote
}

message VotePostResponse {
  int32 new_score = 1;  // Updated score of the post after voting
}

// Create Request request and response
message CreatePostRequest {
Post post = 1;
}

message CreatePostResponse{
   Post new_post = 1;
}


// Ping and Pong - testing server
message PingRequest{
   string message =  1;
   int32 val = 2;
}

message PongResponse{
   string message = 1;
}

message User {
    string user_id = 1;  // A human-readable user ID
  }

  message Post {
    int32 id = 1;
    string title = 2;    // Title of the post
    string text = 3;     // Text content of the post
  
    // Optional video or image URL
    oneof media {
      string video_url = 4;
      string image_url = 5;
    }
    string subreddit = 6;
    string tags = 7; // subreddit tags attached to a post
    string author = 8;// Optional author (not included as it's optional in this universe)
    int32 score = 9;     // Score of the post, can be negative
    State state = 10;     // State of the post
    int64 publication_date = 11; // Publication date in Unix timestamp
  
    enum State {
      NORMAL = 0;
      LOCKED = 1;
      HIDDEN = 2; // Another word for deleted
    }
  }

  message Comment {
    int32 id = 1;
    string author = 2;   // Author of the comment (required)
    string text = 3;     // Text content of the comment
    int32 score = 4;     // Score of the comment, can be negative
    CommentState state = 5; // State of the comment
    int64 publication_date = 6; // Publication date in Unix timestamp
    int32 post_id = 7;
    int32 reply_to = 8;
    enum CommentState {
      NORMAL = 0;
      HIDDEN = 1; // Comment is hidden
    }
  }

  /*
    c1
    c2
      c4
      c5
    c3
  
  */

  message Subreddit {
    string name = 1; // Human-readable name of the subreddit
    Visibility status = 2; // Visibility status of the subreddit
    repeated string tags = 3; // Tags associated with the subreddit
  
    enum Visibility {
      PUBLIC = 0;
      PRIVATE = 1;
      HIDDEN = 2;
    }
  }
  